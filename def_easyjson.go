// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package TimeRules

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBd71bc9fDecodeTimeRules(in *jlexer.Lexer, out *TimeObj) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hour":
			out.Hour = uint16(in.Uint16())
		case "min":
			out.Min = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd71bc9fEncodeTimeRules(out *jwriter.Writer, in TimeObj) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Hour != 0 {
		const prefix string = ",\"hour\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Hour))
	}
	if in.Min != 0 {
		const prefix string = ",\"min\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Min))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TimeObj) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd71bc9fEncodeTimeRules(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TimeObj) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd71bc9fEncodeTimeRules(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TimeObj) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd71bc9fDecodeTimeRules(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TimeObj) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd71bc9fDecodeTimeRules(l, v)
}
func easyjsonBd71bc9fDecodeTimeRules1(in *jlexer.Lexer, out *DateTimeObj) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "date":
			(out.Date).UnmarshalEasyJSON(in)
		case "time":
			(out.Time).UnmarshalEasyJSON(in)
		case "timezone":
			out.Timezone = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd71bc9fEncodeTimeRules1(out *jwriter.Writer, in DateTimeObj) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if true {
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Date).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Time).MarshalEasyJSON(out)
	}
	if in.Timezone != "" {
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Timezone))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DateTimeObj) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd71bc9fEncodeTimeRules1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DateTimeObj) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd71bc9fEncodeTimeRules1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DateTimeObj) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd71bc9fDecodeTimeRules1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DateTimeObj) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd71bc9fDecodeTimeRules1(l, v)
}
func easyjsonBd71bc9fDecodeTimeRules2(in *jlexer.Lexer, out *DateObj) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "year":
			out.Year = int64(in.Int64())
		case "month":
			out.Month = uint16(in.Uint16())
		case "day":
			out.Day = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBd71bc9fEncodeTimeRules2(out *jwriter.Writer, in DateObj) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Year != 0 {
		const prefix string = ",\"year\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Year))
	}
	if in.Month != 0 {
		const prefix string = ",\"month\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Month))
	}
	if in.Day != 0 {
		const prefix string = ",\"day\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Day))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DateObj) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBd71bc9fEncodeTimeRules2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DateObj) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBd71bc9fEncodeTimeRules2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DateObj) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBd71bc9fDecodeTimeRules2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DateObj) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBd71bc9fDecodeTimeRules2(l, v)
}
